// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Support.DataAccess.EF;

namespace Support.DataAccess.EF.Migrations
{
    [DbContext(typeof(SupportDbContext))]
    partial class SupportDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Support.Domain.Model.Access", b =>
                {
                    b.Property<int>("AccessId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessDesc");

                    b.Property<string>("AccessName");

                    b.Property<bool>("IsGeneral");

                    b.HasKey("AccessId");

                    b.ToTable("Access","sec");
                });

            modelBuilder.Entity("Support.Domain.Model.AccessPolicy", b =>
                {
                    b.Property<int>("AccessPolicyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessId");

                    b.Property<int>("PersonId");

                    b.HasKey("AccessPolicyId");

                    b.HasIndex("AccessId");

                    b.HasIndex("PersonId");

                    b.ToTable("AccessPolicy","sec");
                });

            modelBuilder.Entity("Support.Domain.Model.Config", b =>
                {
                    b.Property<int>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName");

                    b.Property<int?>("ConfigHdrId");

                    b.Property<string>("ConfigName");

                    b.Property<string>("ConfigNote");

                    b.Property<int>("ConfigSort");

                    b.Property<int>("ConfigValue");

                    b.HasKey("ConfigId");

                    b.HasIndex("ConfigHdrId");

                    b.ToTable("Config","gen");
                });

            modelBuilder.Entity("Support.Domain.Model.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeTypeId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description")
                        .HasMaxLength(2147483647);

                    b.Property<string>("EntityName");

                    b.Property<int>("PersonId");

                    b.Property<int>("PrimaryKey");

                    b.HasKey("LogId");

                    b.HasIndex("PersonId");

                    b.ToTable("Log","gen");
                });

            modelBuilder.Entity("Support.Domain.Model.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("Gender");

                    b.Property<string>("LastName");

                    b.Property<string>("LoginName");

                    b.Property<string>("Mobile");

                    b.Property<string>("Password");

                    b.Property<int>("StatusId");

                    b.HasKey("PersonId");

                    b.HasIndex("StatusId");

                    b.ToTable("Person","gen");
                });

            modelBuilder.Entity("Support.Domain.Model.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssignedId");

                    b.Property<string>("Description");

                    b.Property<int>("PriorityId");

                    b.Property<int>("ProjectId");

                    b.Property<int>("RequestById");

                    b.Property<DateTime>("RequestDate");

                    b.Property<int>("StatusId");

                    b.Property<string>("Title");

                    b.Property<int>("TypeId");

                    b.HasKey("RequestId");

                    b.HasIndex("AssignedId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("RequestById");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Request","gen");
                });

            modelBuilder.Entity("Support.Domain.Model.Response", b =>
                {
                    b.Property<int>("ResponseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreateById");

                    b.Property<string>("Note");

                    b.Property<bool>("Private");

                    b.Property<int>("RequestId");

                    b.Property<DateTime>("ResponseDate");

                    b.HasKey("ResponseId");

                    b.HasIndex("CreateById");

                    b.HasIndex("RequestId");

                    b.ToTable("Response","gen");
                });

            modelBuilder.Entity("Support.Domain.Model.AccessPolicy", b =>
                {
                    b.HasOne("Support.Domain.Model.Access", "Access")
                        .WithMany("AccessPolicies")
                        .HasForeignKey("AccessId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Support.Domain.Model.Person", "Person")
                        .WithMany("AccessPolicies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Support.Domain.Model.Config", b =>
                {
                    b.HasOne("Support.Domain.Model.Config", "ConfigHdr")
                        .WithMany()
                        .HasForeignKey("ConfigHdrId");
                });

            modelBuilder.Entity("Support.Domain.Model.Log", b =>
                {
                    b.HasOne("Support.Domain.Model.Person", "Person")
                        .WithMany("Logs")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Support.Domain.Model.Person", b =>
                {
                    b.HasOne("Support.Domain.Model.Config", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Support.Domain.Model.Request", b =>
                {
                    b.HasOne("Support.Domain.Model.Person", "Assigned")
                        .WithMany("AssignResponses")
                        .HasForeignKey("AssignedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Support.Domain.Model.Config", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Support.Domain.Model.Config", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Support.Domain.Model.Person", "RequestBy")
                        .WithMany("Requests")
                        .HasForeignKey("RequestById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Support.Domain.Model.Config", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Support.Domain.Model.Config", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Support.Domain.Model.Response", b =>
                {
                    b.HasOne("Support.Domain.Model.Person", "CreateBy")
                        .WithMany("CreateResponses")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Support.Domain.Model.Request", "Request")
                        .WithMany("Responses")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
